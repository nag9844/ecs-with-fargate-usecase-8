name: Terraform CI/CD

on:
  pull_request:
    branches:
      - main
  push: 
    branches:
      - main


jobs:
  lint-and-security:
    name: Lint and Security Checks
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: v0.50.2

      - name: Run TFLint
        run: tflint --init && tflint -f compact
        working-directory: ./

      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.0
        continue-on-error: true

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: .
          framework: terraform
        continue-on-error: true

  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    needs: lint-and-security

    env:
      AWS_REGION: ${{ secrets.AWS_REGION || 'ap-south-1' }}

    defaults:
      run:
        shell: bash

    steps:                          # This `steps` keyword needs to be here, directly under the `terraform` job
      - name: Checkout
        uses: actions/checkout@v4   # You'll need to checkout the code in this job too

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::199570228070:role/oidc-demo-role # Replace with your actual IAM role ARN
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        
      - name: Format Terraform code
        run: terraform fmt -recursive
        id: fmt 

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true
      
      - name: Setup Node.js
        if: github.event_name == 'pull_request'
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install terraform-docs
        if: github.event_name == 'pull_request'
        run: |
          curl -sSLo ./terraform-docs.tar.gz https://terraform-docs.io/dl/v0.16.0/terraform-docs-v0.16.0-$(uname)-amd64.tar.gz
          tar -xzf terraform-docs.tar.gz
          chmod +x terraform-docs
          sudo mv terraform-docs /usr/local/bin/

      - name: Generate Terraform Docs and Commit
        if: github.event_name == 'pull_request'
        run: |
          git config --local user.email "vnagaraj984@gmail.com"
          git config --local user.name "nag9844"

          echo "--- Generating terraform-docs ---"
          # Direct terraform-docs to generate markdown to a temporary file
          terraform-docs markdown . > README.md.new
          # Overwrite the actual README.md only if generation was successful
          mv README.md.new README.md

          # Add README.md to staging area.
          if [ -f README.md ]; then
            git add README.md
            # Attempt to commit. If there are no changes staged, this will return a non-zero exit code.
            # The '|| true' ensures the step doesn't fail, but we'll check if a commit happened later.
            if git commit -m "docs: Update README.md"; then
              echo "Successfully committed README.md changes."
            else
              echo "No README.md changes to commit or commit failed. Continuing..."
              # Check if there are still unstaged changes that were not committed
              if ! git diff --quiet; then
                echo "WARNING: Uncommitted changes still exist after attempting to commit README.MD."
                git status
              fi
            fi
          else
            echo "WARNING: README.md was not generated by terraform-docs."
          fi

      - name: Update Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style \`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization \`${{ steps.init.outcome }}\`
            #### Terraform Validation \`${{ steps.validate.outcome }}\`
            #### Terraform Plan \`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false