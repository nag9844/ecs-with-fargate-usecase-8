name: Terraform Infrastructure

on:
  push:
    branches: [main]
    paths:
      - '*.tf'
      - 'modules/**'
  pull_request:
    branches: [main]
    paths:
      - '*.tf'
      - 'modules/**'
  workflow_dispatch: # Allows manual triggering from the GitHub UI

permissions:
  id-token: write # Required for OIDC authentication with AWS
  contents: write # Required for checkout and updating README
  pull-requests: write # Required for commenting on PRs

env:
  AWS_REGION: ap-south-1
  TF_VERSION: 1.12.0 # Ensure this is a valid Terraform version

jobs:
  terraform-validate:
    name: Terraform Validate & Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Install TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: v0.50.2 # Specify a TFLint version

      - name: Run TFLint
        id: tflint # Added ID for output
        continue-on-error: true # Allow this to fail without failing the job
        run: |
          tflint --init
          tflint -f compact
        working-directory: ./ # Ensure this is correct

      - name: Run Checkov
        id: checkov # Added ID for output
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: ./ # Ensure this is correct
          framework: terraform
        continue-on-error: true # Allow this to fail without failing the job

      - name: Terraform Format Check
        id: fmt
        run: |
          terraform fmt -recursive .
          # The above command exits with 0 if correctly formatted, 1 if not.
          # We capture its output to display in the PR comment.
          echo "::set-output name=stdout::$(terraform fmt -recursive -check . 2>&1)"
        continue-on-error: true # Allow this to fail without failing the job

      - name: Terraform Init
        id: init
        # No backend configured for validation. If you have a remote backend for state,
        # you might want to adjust this or have a separate init for validation.
        run: terraform init -backend=false

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Comment PR - Validation Results
        if: github.event_name == 'pull_request' # Only comment on PRs
        uses: actions/github-script@v7
        with:
          script: |
            const output = `
            ## Terraform Validation Results 
            
            | Check | Status |
            |-------|--------|
            | Format | \`${{ steps.fmt.outcome }}\` |
            | Init | \`${{ steps.init.outcome }}\` |
            | Validate | \`${{ steps.validate.outcome }}\` |
            | TFLint | \`${{ steps.tflint.outcome }}\` |
            | Checkov | \`${{ steps.checkov.outcome }}\` |
            
            <details><summary> Validation Details</summary>
            
            ### Terraform Format
            \`\`\`
            ${{ steps.fmt.outputs.stdout }}
            \`\`\`
            
            ### TFLint Results
            \`\`\`
            ${{ steps.tflint.outputs.stdout }}
            \`\`\`
            
            ### Checkov Security Scan
            \`\`\`
            ${{ steps.checkov.outputs.stdout }}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: terraform-validate
    # Only run if it's a pull request AND the validate job succeeded
    if: github.event_name == 'pull_request' && needs.terraform-validate.result == 'success'
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }} 
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Plan
        id: plan
        # Capture plan output to a file and then read it for the PR comment
        run: |
          terraform plan -no-color -out=tfplan 2>&1 | tee plan_output.txt
          echo "plan_output<<EOF" >> $GITHUB_OUTPUT
          cat plan_output.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        continue-on-error: true # Allow plan to report differences without failing the job

      - name: Comment PR - Plan Results
        uses: actions/github-script@v7
        with:
          script: |
            const plan = `${{ steps.plan.outputs.plan_output }}`;
            const truncatedPlan = plan.length > 65000 ? plan.substring(0, 65000) + "\n... (truncated)" : plan;
            
            const output = `
            ## Terraform Plan Results 
            
            **Plan Status:** \`${{ steps.plan.outcome }}\`
            
            <details><summary> Show Terraform Plan</summary>
            
            \`\`\`terraform
            ${truncatedPlan}
            \`\`\`
            
            </details>
            
            ### Plan Summary
            - **Action:** \`${{ github.event_name }}\`
            - **Triggered by:** @${{ github.actor }}
            - **Commit:** ${{ github.sha }}
            
            > This plan will be applied automatically when this PR is merged to main branch.
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-plan # Depends on plan, ensuring plan runs first
    # Only run if it's a push to the main branch AND the plan job succeeded
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && needs.terraform-plan.result == 'success'
    
    environment:
      name: production # Good practice to link to an environment
      url: ${{ steps.terraform-output.outputs.alb_dns_name }} # Dynamically set URL if available

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }} # Ensure this variable is set in your repo/org secrets
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false # Keep this if you need raw Terraform CLI access

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        id: apply
        # Capture apply output for summary
        run: |
          terraform apply -auto-approve 2>&1 | tee apply_output.txt
          echo "apply_output<<EOF" >> $GITHUB_OUTPUT
          cat apply_output.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Terraform Output
        id: terraform-output
        run: |
          # Check if outputs exist before trying to get them
          alb_dns_name=""
          if terraform output -raw alb_dns_name &>/dev/null; then
            alb_dns_name=$(terraform output -raw alb_dns_name)
          fi
          
          ecr_patient_repository_url=""
          if terraform output -raw ecr_patient_repository_url &>/dev/null; then
            ecr_patient_repository_url=$(terraform output -raw ecr_patient_repository_url)
          fi
          
          ecr_appointment_repository_url=""
          if terraform output -raw ecr_appointment_repository_url &>/dev/null; then
            ecr_appointment_repository_url=$(terraform output -raw ecr_appointment_repository_url)
          fi
          
          vpc_id=""
          if terraform output -raw vpc_id &>/dev/null; then
            vpc_id=$(terraform output -raw vpc_id)
          fi

          ecs_cluster_name=""
          if terraform output -raw ecs_cluster_name &>/dev/null; then
            ecs_cluster_name=$(terraform output -raw ecs_cluster_name)
          fi

          echo "alb_dns_name=$alb_dns_name" >> $GITHUB_OUTPUT
          echo "ecr_patient_repository_url=$ecr_patient_repository_url" >> $GITHUB_OUTPUT
          echo "ecr_appointment_repository_url=$ecr_appointment_repository_url" >> $GITHUB_OUTPUT
          echo "vpc_id=$vpc_id" >> $GITHUB_OUTPUT
          echo "ecs_cluster_name=$ecs_cluster_name" >> $GITHUB_OUTPUT
        # Add a conditional to skip if apply failed, or if outputs are not guaranteed
        # if: success() # Optional, but good if you expect apply to always succeed for outputs

      - name: Update README with Infrastructure Details
        # This step should run only if the apply was successful and outputs are available
        if: success() && steps.terraform-output.outputs.alb_dns_name # Ensure ALB DNS is available for URL
        run: |
          CURRENT_DATE=$(TZ='Asia/Kolkata' date '+%Y-%m-%d %H:%M:%S IST') # Adjusted for IST time zone
          
          cat > infrastructure_section.md << EOF
          
          ##  Infrastructure Details
          
          **Last Updated:** ${CURRENT_DATE}
          
          ### Deployed Resources
          
          | Resource | Value |
          |----------|-------|
          | **Load Balancer DNS** | \`${{ steps.terraform-output.outputs.alb_dns_name }}\` |
          | **VPC ID** | \`${{ steps.terraform-output.outputs.vpc_id }}\` |
          | **ECS Cluster** | \`${{ steps.terraform-output.outputs.ecs_cluster_name }}\` |
          | **Patient Service ECR** | \`${{ steps.terraform-output.outputs.ecr_patient_repository_url }}\` |
          | **Appointment Service ECR** | \`${{ steps.terraform-output.outputs.ecr_appointment_repository_url }}\` |
          
          ### Quick Access URLs
          
          - **Patient Service Health Check:** http://${{ steps.terraform-output.outputs.alb_dns_name }}/api/patients
          - **Appointment Service Health Check:** http://${{ steps.terraform-output.outputs.alb_dns_name }}/api/appointments
          - **AWS Console - ECS Cluster:** https://console.aws.amazon.com/ecs/home?region=${{ env.AWS_REGION }}#/clusters/${{ steps.terraform-output.outputs.ecs_cluster_name }}
          
          ### Deployment Status
          
           Infrastructure successfully deployed and configured
          
          EOF
          
          # Check if README.md exists and has infrastructure section
          # Using a more specific marker for replacement to avoid issues
          if grep -q "##  Infrastructure Details" README.md; then
            sed -i '/##  Infrastructure Details/,$d' README.md
            cat infrastructure_section.md >> README.md
          else
            cat infrastructure_section.md >> README.md
          fi
          
          rm infrastructure_section.md

      - name: Commit Updated README
        # Only commit if the README was actually updated and the apply was successful
        if: success() && steps.terraform-output.outputs.alb_dns_name
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m " Update README with latest infrastructure details [skip ci]"
            git push
          fi

      - name: Create Deployment Summary
        # This step should run only if the apply was successful and outputs are available
        if: success() && steps.terraform-output.outputs.alb_dns_name
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Infrastructure Successfully Deployed!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Resource | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Load Balancer DNS | \`${{ steps.terraform-output.outputs.alb_dns_name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| VPC ID | \`${{ steps.terraform-output.outputs.vpc_id }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| ECS Cluster | \`${{ steps.terraform-output.outputs.ecs_cluster_name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Test the services: http://${{ steps.terraform-output.outputs.alb_dns_name }}/api/patients" >> $GITHUB_STEP_SUMMARY
          echo "2. Deploy applications using the build-and-deploy workflow" >> $GITHUB_STEP_SUMMARY
          echo "3. Monitor the deployment in AWS Console" >> $GITHUB_STEP_SUMMARY