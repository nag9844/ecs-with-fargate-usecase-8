name: Terraform Infrastructure CI/CD

on:
  push:
    branches:
      - main
    paths:
      - '*.tf'
      - 'modules/**'
  pull_request:
    branches:
      - main
    paths:
      - '*.tf'
      - 'modules/**'
  workflow_dispatch: # Allows manual triggering of the workflow

env:
  AWS_REGION: ap-south-1
  TF_VERSION: 1.12.0

jobs:
  # This job runs for all triggers (push, pull_request, workflow_dispatch)
  terraform-validate:
    name: Terraform Validate & Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: v0.50.2

      - name: Run TFLint
        continue-on-error: true # Allow subsequent steps to run even if TFLint fails
        run: |
          tflint --init
          tflint -f compact
        working-directory: ./

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: ./
          framework: terraform
        continue-on-error: true # Allow subsequent steps to run even if Checkov fails

      - name: Comment PR - Validation Results
        # Only comment on pull requests
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const output = `
            ## Terraform Validation Results
            
            | Check | Status |
            |-------|--------|
            | TFLint | \`${{ steps.run-tflint.outcome }}\` |
            | Checkov | \`${{ steps.run-checkov.outcome }}\` |
            
            <details><summary> Validation Details</summary>
            
            ### TFLint Results
            \`\`\`
            ${{ steps.run-tflint.outputs.stdout || 'No TFLint output.' }}
            \`\`\`
            
            ### Checkov Security Scan
            \`\`\`
            ${{ steps.run-checkov.outputs.stdout || 'No Checkov output.' }}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  # This job runs only for pull requests to main to show the plan
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: terraform-validate # Ensure validation passes before planning
    # Only run on pull requests to the main branch and if terraform-validate job passed
    if: github.event_name == 'pull_request' && needs.terraform-validate.result == 'success'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -no-color -out=tfplan 2>&1 | tee plan_output.txt
          echo "plan_output<<EOF" >> $GITHUB_OUTPUT
          cat plan_output.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        continue-on-error: true # Allow the PR comment even if plan fails

      - name: Comment PR - Plan Results
        uses: actions/github-script@v7
        with:
          script: |
            const plan = `${{ steps.plan.outputs.plan_output }}`;
            const truncatedPlan = plan.length > 65000 ? plan.substring(0, 65000) + "\n... (truncated)" : plan;
            
            const output = `
            ## Terraform Plan Results 
            
            **Plan Status:** \`${{ steps.plan.outcome }}\`
            
            <details><summary> Show Terraform Plan</summary>
            
            \`\`\`terraform
            ${truncatedPlan}
            \`\`\`
            
            </details>
            
            ### Plan Summary
            - **Action:** \`${{ github.event_name }}\`
            - **Triggered by:** @${{ github.actor }}
            - **Commit:** ${{ github.sha }}
            
            > This plan will be applied automatically when this PR is merged to main branch.
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  # This job runs only on pushes to main to apply changes and update README
  terraform-apply-and-update-readme:
    name: Terraform Apply & Update README
    runs-on: ubuntu-latest
    needs: terraform-validate # Ensure validation passes before applying
    # Only run on push to the main branch and if terraform-validate job passed
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && needs.terraform-validate.result == 'success'

    environment:
      name: production
      url: ${{ steps.terraform-output.outputs.alb_dns_name }} # Ensure this matches your output name if it changes

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        id: apply
        run: |
          terraform apply -auto-approve 2>&1 | tee apply_output.txt
          echo "apply_output<<EOF" >> $GITHUB_OUTPUT
          cat apply_output.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Terraform Output
        id: terraform-output
        run: |
          echo "alb_dns_name=$(terraform output -raw alb_dns_name)" >> $GITHUB_OUTPUT
          echo "ecr_patient_repository_url=$(terraform output -raw ecr_patient_repository_url)" >> $GITHUB_OUTPUT
          echo "ecr_appointment_repository_url=$(terraform output -raw ecr_appointment_repository_url)" >> $GITHUB_OUTPUT
          echo "vpc_id=$(terraform output -raw vpc_id)" >> $GITHUB_OUTPUT
          echo "ecs_cluster_name=$(terraform output -raw ecs_cluster_name)" >> $GITHUB_OUTPUT
        # Ensure this step is successful to proceed with README update
        continue-on-error: false 

      - name: Update README with Infrastructure Details
        run: |
          # Get current date
          CURRENT_DATE=$(date '+%Y-%m-%d %H:%M:%S UTC')
          
          # Create infrastructure section for README
          cat > infrastructure_section.md << EOF
          
          ## Infrastructure Details
          
          **Last Updated:** ${CURRENT_DATE}
          
          ### Deployed Resources
          
          | Resource | Value |
          |----------|-------|
          | **Load Balancer DNS** | \`${{ steps.terraform-output.outputs.alb_dns_name }}\` |
          | **VPC ID** | \`${{ steps.terraform-output.outputs.vpc_id }}\` |
          | **ECS Cluster** | \`${{ steps.terraform-output.outputs.ecs_cluster_name }}\` |
          | **Patient Service ECR** | \`${{ steps.terraform-output.outputs.ecr_patient_repository_url }}\` |
          | **Appointment Service ECR** | \`${{ steps.terraform-output.outputs.ecr_appointment_repository_url }}\` |
          
          ### Quick Access URLs
          
          - **Patient Service Health Check:** http://${{ steps.terraform-output.outputs.alb_dns_name }}/api/patients
          - **Appointment Service Health Check:** http://${{ steps.terraform-output.outputs.alb_dns_name }}/api/appointments
          - **AWS Console - ECS Cluster:** https://console.aws.amazon.com/ecs/home?region=${{ env.AWS_REGION }}#/clusters/${{ steps.terraform-output.outputs.ecs_cluster_name }}
          
          ### Deployment Status
          
          Infrastructure successfully deployed and configured
          
          EOF
          
          # Check if README.md exists and has infrastructure section
          if grep -q "## Infrastructure Details" README.md; then
            # Replace existing infrastructure section
            sed -i '/## Infrastructure Details/,$d' README.md
            cat infrastructure_section.md >> README.md
          else
            # Append new infrastructure section
            cat infrastructure_section.md >> README.md
          fi
          
          # Clean up
          rm infrastructure_section.md

      - name: Commit Updated README
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m " Update README with latest infrastructure details [skip ci]"
            git push
          fi

      - name: Create Deployment Summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Infrastructure Successfully Deployed!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Resource | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Load Balancer DNS | \`${{ steps.terraform-output.outputs.alb_dns_name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| VPC ID | \`${{ steps.terraform-output.outputs.vpc_id }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| ECS Cluster | \`${{ steps.terraform-output.outputs.ecs_cluster_name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Test the services: http://${{ steps.terraform-output.outputs.alb_dns_name }}/api/patients" >> $GITHUB_STEP_SUMMARY
          echo "2. Deploy applications using the build-and-deploy workflow" >> $GITHUB_STEP_SUMMARY
          echo "3. Monitor the deployment in AWS Console" >> $GITHUB_STEP_SUMMARYs